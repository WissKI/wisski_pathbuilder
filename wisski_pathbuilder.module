<?php

/*
 * (c) WissKI Project wiss-ki.eu
 * This software is licensed under the same terms as Drupal
 * (GNU GPLv2  or later). See LICENSE.txt for a copy of the license.
 */

/**
 * @file
 * Allows administrators to customize the site templating menu.
 *
 */

function wisski_pathbuilder_init() {
}

/**
 * Implementation of hook_perm().
 */
function wisski_pathbuilder_perm() {
  return array('wisski access templateView', 'wisski access templateEdit', 'wisski access templateCreate');
}


function wisski_pathbuilder_group_load($menu) {
  if(is_numeric($menu))
    $result = db_query("SELECT * FROM {wisski_template} WHERE is_group = 1 AND enabled = 1 AND id = $menu");
  else
    $result = db_query("SELECT * FROM {wisski_template} WHERE is_group = 1 AND enabled = 1 AND name = '$menu'");
    
  $arr = db_fetch_array($result);
      
  if(!isset($arr['id']))
    return FALSE;
  return $arr['id'];
              
}


/**
 * Implementation of hook_menu().
 */
 
function wisski_pathbuilder_menu() {

  $items['wisski_pathbuilder/autocomplete/%'] = array(
    'title' => 'Autocomplete',
    'description' => "Desc",
    'page callback' => 'wisski_pathbuilder_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('wisski access templateCreate'),
    'file' => 'wisski_pathbuilder.inc',
    'type' => MENU_CALLBACK,
  );

  $items['wisski_pathbuilder/duplicate/%'] = array(
    'title' => 'Autocomplete',
    'description' => "Desc",
    'page callback' => 'wisski_pathbuilder_duplicate',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('wisski access templateCreate'),
    'file' => 'wisski_pathbuilder.inc',
    'type' => MENU_CALLBACK,
  );

  global $user;

  $node = new stdclass();
  $node->type = "individual";
  $node->language = "";

  $items['node/add/individual/%wisski_pathbuilder_group'] = array(
    'title' => t("Group"),
    'description' => t("Desc"),
    'page callback' => 'wisski_form_forward',
    'page arguments' => array($node),
    'access callback' => 'user_access',
    'access arguments' => array('wisski access templateCreate'),
    'type'     => MENU_NORMAL_ITEM,            
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );

  $items['node/%node/tview'] = array(
    'title'    => t('Template View'),
    'page callback' => 'wisski_pathbuilder_template_view',
    'page arguments' => array(array(), 1),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('wisski_pathbuilder_template_view',1),
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski access templateView'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );
  
  $items['node/%node/xview'] = array(
    'title'    => t('Text View'),
    'page callback' => 'wisski_pathbuilder_getText',
    'page arguments' => array(1),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('wisski_pathbuilder_template_view',1),
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski access templateView'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['node/%node/pathview'] = array(
    'title'    => t('Paths'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pathbuilder_path_view',1),
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski administrate page'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );
  
  $items['node/%node/tedit'] = array(
    'title'    => t('Edit'),
    'page callback' => 'wisski_form_forward',
    'page arguments' => array(1), 
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski access templateEdit'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/add_own_path/%'] = array(
    'title' => t('Add Path'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_wisski_pathbuilder_add_own_path', 5),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/get_own_path'] = array(
    'page callback' => 'wisski_pathbuilder_calculate_path',
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/%/edit'] = array(
    'title' => t('Edit menu item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pathbuilder_edit_item', 'edit', 4, NULL),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/%/delete'] = array(
    'title' => t('Delete menu item'),
    'page callback' => 'wisski_pathbuilder_delete_item',
    'page arguments' => array(4),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder'] = array(
    'title' => t('Pathbuilder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pathbuilder_overview_form', 'Pathbuilder'),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
    'weight' => 2,
  );
  
  include_once(dirname(__FILE__) . '/wisski_pathbuilder.inc');
  
  foreach(wisski_pathbuilder_getPathbuilderTrees() as $key => $elemname) {  

    $items['admin/settings/wisski/pathbuilder/'.$key.'/'] = array(
      'title' => t($elemname),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_pathbuilder_overview_form', 'Pathbuilder', $key),
      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    if($key == 2)
      $items['admin/settings/wisski/pathbuilder/'.$key.'/']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
  
  return $items;
}

function wisski_form_forward($node) {

  module_load_include('inc', 'node', 'node.pages');

  if(empty($node->nid)) {
    global $user;
    node_object_prepare($node);
    $node->uid = $user->uid;
    $node->name = $user->name;
  }

  return drupal_get_form('individual_node_form', $node);
}

/**
 * Implemenation of hook_theme().
 */
function wisski_pathbuilder_theme() {

  return array(
    'wisski_pathbuilder_overview_form' => array(
      'file' => 'wisski_pathbuilder.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Title callback for the menu overview page and links.
 */ 
function wisski_pathbuilder_overview_title($menu) {
  return t($menu);
}

/**
 * Implementation of hook_nodeapi().
 */
function wisski_pathbuilder_nodeapi(&$node, $op) {
  if($op == "view") {
	  if($node->content['body'] != "")
		  unset($node->content['ARC']);  
  }
}

function wisski_pathbuilder_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('WissKI templated view');
    $block[1]["info"] = t('WissKI text view');
    $block[2]["info"] = t('WissKI image view');
    return $block;
                
  } else if ($op == "view") {
    if(is_numeric(arg(1)))
      $node = node_load(arg(1));
    if(!isset($node))
      return;
      
    if(!user_access('wisski access templateView'))
      return;
      
    if ($delta == 0) {
      
      $block['subject'] = t('Templated Content');
      include_once(dirname(__FILE__) . '/wisski_pathbuilder.inc');
      $block['content'] =  wisski_pathbuilder_template_view(array(), $node);    
      return $block;          
    } else if ($delta == 1) {
      $block['subject'] = t('Blocked Text');

      $block['content'] = wisski_pathbuilder_getText($node);
      return $block;
    } else if ($delta == 2) {

      $block['subject'] = t('Images');
      include_once(dirname(__FILE__) . '/wisski_pathbuilder.inc');
      $block['content'] = wisski_pathbuilder_getImages($node);
      return $block;
    }
  }
}

function wisski_pathbuilder_getText($node) {
  $indiv = $node->title;

  $namespaces = wisski_store_getObj()->wisski_ARCAdapter_getNamespaces();
	  $q = "";
  	foreach ($namespaces as $name => $val) {
      $q .= "PREFIX $name:\t<$val>\n";
  	}  
  	
  // beware! Dirty!
  $pred = "ecrm:P129i_is_subject_of";
  
  $q .= "SELECT * WHERE { <" . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv) . "> <" 
    .  wisski_store_getObj()->wisski_ARCAdapter_delNamespace($pred) . "> ?x . }";
  $rows =  wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($q, 'rows');

  // by Martin: if no text  found, search via Document group path
  if (!$rows && module_exists('wisski_textproc')) {
    $text_uris = wisski_textproc_get_texts(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv));
    $rows = array(array('x' => $text_uris[0]));
  }
  // end by Martin
 
  $url = parse_url($rows[0]['x']);
  global $base_url;
  $base = $base_url . "/";
  $search = str_replace($base, "", $rows[0]['x']);
  $text = drupal_get_normal_path($search);
  
  $node2 = node_load(arg(1,$text));

  if (empty($node2->body)) return '';
  // TEI support
  if (module_exists('wisski_textproc') && function_exists('wisski_textproc_convert_tei_to_html')) {
    return wisski_textproc_convert_tei_to_html($node2->body); // transform tei to html
  } else {
    return $node2->body;  // normal output
  }
  // end TEI support
  // old:
  // return $node2->body;
}

function wisski_pathbuilder_getImages($node, $images = 0) {
//  return _wisski_pathbuilder_make_image_string($node, $images,_wisski_pathbuilder_getImages($node, $images));

  // if there is no node, skip it
  if(empty($node))
    return;
  
  // if it is a number, we have to load it
  if(is_numeric($node))
    $node = node_load($node);
  
  // if it is an object and it is not an individual node we have no picture for you (thank you heidi ;D)
  if(is_object($node) && $node->type != "individual")
    return;

  // if it is an object and it seems to be an individual - get the title
  if(is_object($node))
    $title = $node->title;
  else // or did we get a title?
    $title = $node;

  // if we have no title now, we can skip this!
  if(empty($title))
    return;
  
  global $base_url;
  if(!strpos($base_url, $title))
    $title = wisski_store_getObj()->wisski_ARCAdapter_delNamespace($title);

  if($images)
    $result = db_query("SELECT title FROM {wisski_image_cache} WHERE uri = '" . $title . "' LIMIT $images");
  else
    $result = db_query("SELECT title FROM {wisski_image_cache} WHERE uri = '" . $title . "'");
  
  $images_from_db = array();

  while($image_from_db = db_fetch_array($result))
    $images_from_db[] = array('out' => $image_from_db['title']);
  
  if(empty($images_from_db)) {
    $images_from_db = _wisski_pathbuilder_getImages($node);
    
    if(!empty($images_from_db))
      foreach($images_from_db as $pic) {
        db_query("INSERT INTO {wisski_image_cache} (uri, title) VALUES ('" . mysql_real_escape_string($title) . "', '" . mysql_real_escape_string($pic['out']) . "')");
      }
  }

  return _wisski_pathbuilder_make_image_string($node, $images, $images_from_db);
}

function _wisski_pathbuilder_getImages($node, $images = 0) {
  
  if(empty($node))
    return;
  
  if(is_numeric($node) && $node->type != "individual")
    return;

  if(is_object($node))
    $indiv = $node->title;
  else
    $indiv = $node;

  if(empty($indiv))
    return;

  $group = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv), TRUE);
  
  $allgroups = wisski_pathbuilder_getAllMembers($group, FALSE);
  
  $imagegroups = array();
  
  foreach($allgroups as $imagegroup) {
    $data = wisski_pathbuilder_getPathData($imagegroup);
    if($data['fieldtype'] == "images") {
      $imagegroups[] = $imagegroup;
    }
  }
  
  $imagestr = "";
  
  $counter = 0;
  $condition = ("FILTER ( ?x0 = <" . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv). "> ) ");
  
  $total_sparql = "";
  
  if(count($imagegroups) > 1) {
    $total_sparql = "SELECT ?out WHERE ";
    foreach($imagegroups as $imagegroup) {
      $counter++;
      $sparql = wisski_pathbuilder_get_sparql($imagegroup, $condition);
      preg_replace('/SELECT .*? WHERE/i', '', $sparql);
      
      $total_sparql .= $sparql;
      
      if($counter < count($imagegroups))
        $total_sparql .= " UNION ";
    }
  } else if(count($imagegroups) == 1) {
    foreach($imagegroups as $imagegroup) {
      $total_sparql = wisski_pathbuilder_get_sparql($imagegroup, $condition);
    }
  }
  
  if(empty($total_sparql))
    return;
  
  if($images > 0) 
    $total_sparql .= " LIMIT " . $images;

  $rows =  wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($total_sparql, 'rows');

  return $rows;
}


function _wisski_pathbuilder_make_image_string($node, $images, $pics = array()) {
    // this is necessary for file handling with umlauts like äöü
    setlocale(LC_CTYPE, "de_DE.UTF-8");
    
    if(!is_array($pics) || empty($pics))
      return "";
    
    foreach($pics as $pic) {
      $pic = $pic['out'];
          
    
    if(trim($pic) == "")
      continue;

    $pic = str_replace(' ', '%20', $pic);

    // if imagecache module is running, look if the image is there and get it if it is      
    if(module_exists("imagecache")) {
      $newname = md5($pic);

      // get the extension of the file from the url
      preg_match('/\.(jpg|jpeg|png|gif|bmp|tif|tiff|pdf)$/i', $pic, $extension);
      $extension = $extension[1];

      if(empty($extension)) // assume jpg if we don't know
        $extension = 'jpg';
        
      // should download be forced on click - 0/1
      $force_download = 0;
      
      // in case of pdf force download, but the thumbnail has to be jpg
      if($extension == "pdf") {
        $force_download = 1;
        $extension = "jpg";
      }

      // file name for the local copy of the original
      $newfile = $newname . '_orig.' . $extension;
        
      // get the path to it
      $orig = imagecache_create_path('wisski_original', $newfile);
      $preset_orig = imagecache_preset_by_name('wisski_original');

      global $base_url;

      // if it is not there already, get it
      if(!is_file($orig)) {
        $localpath = str_replace($base_url . '/', "", $pic);
        // it is not locally available
        if(!realpath($localpath)) {
          $fh = @fopen($pic, "rb");
           
          if($fh) {
            $fw = fopen($orig, "w+");
            while(!feof($fh)) {
              fwrite($fw, fread($fh, 1024 * 8 ), 1024 * 8 );
            }
          } else {
            drupal_set_message(t("The file $pic could not be found. Please check the URL."), "error");
            continue;
          }

        } else { // it is already there, just work with it!
          $orig = $localpath;
        }
      } else { // it is locally available
        // work with the local copy  
      }

      // if it is a tif it might have to be converted
      if(strcasecmp($extension, "tif") == 0 || strcasecmp($extension, "tiff") == 0) {
        $lookpath = str_replace('.' .$extension, '.jpg', $orig);
        
        if(file_exists($lookpath)) {
          $orig = $lookpath;
          $extension = "jpg";
          
        } else { // convert it
          
          $image = imageapi_image_open($orig);
          
          if ($image->info['mime_type'] && $image->toolkit == 'imageapi_imagemagick') {

            //get extension
            $current_path = pathinfo($image->source);
            $rsr = $image->source;
            $ext = $current_path['extension'];

            $destination = str_replace('.' . $ext, '.jpg', $image->source);
            
            // only convert the first image [0]
            $command = escapeshellarg($rsr. '[0]') .' '. escapeshellarg($destination);
            if (0 != _imageapi_imagemagick_convert_exec($command, $output, $errors)) {
              return FALSE;
            }
              
            $orig = $destination;
            $extension = "jpg";
          }
        }
      }
      
      // now $orig should point to the original file
      $presetname = "wisski_thumbnail";      
      $preset = imagecache_preset_by_name($presetname);

      $dst = imagecache_create_path($presetname, $newname . '.' . $extension);

      if (is_file($dst) || @imagecache_build_derivative($preset['actions'], $orig, $dst)) {
        global $base_path;
        if (is_file($orig)) {
          if($force_download == 1) {
            $imagestr .= '<li><a href="' . $base_path . $orig . '"><img src="' . $base_path . $dst . '"/></a></li>';
          } else
            $imagestr .= '<li><a href="' . $base_path . $orig . '" class="wisski-image"><img src="' . $base_path . $dst . '"/></a></li>';
        } else {          
          $imagestr .= '<li><a href="' . $base_path . $dst . '" class="wisski-image"><img src="' . $base_path . $dst . '"/></a></li>';
        }
      } else {
	drupal_set_message("The image with URL " . $pic . " could not be downloaded. Probably the link is wrong.", "error");
        $imagestr .= '<li><a href="' . $pic . '" class="wisski-image"><img src="' . $pic . '"/></a></li>';
      }
    } else {
      $pics = getimagesize($pic);
      if($pics == 0) {
        drupal_set_message(t("Warning: no picture found at ") + $pic + ".", "error");
        continue;
      }
      $factorx = variable_get("wisski_pathbuilder_targetImageWidth", 150)/$pics[0];

      $factor = $factorx;
      $imagestr .= '<li><a class="th" href="javascript:void(0);" title="' . $pic . '" onclick="window.open(\'' .
                   $pic . '\', \'\', \'height=' . $pics[1] . ',width=' . $pics[0] . '\');">' .
                   '<img src="' . $pic . '" alt="' . $pic . '"/></a></li>'; //width="' . round($pics[0]*$factor) . '"></a>';
    }

  }
  

  if(!empty($imagestr))
    return '<ul class="clearing-thumbs" data-orbit data-clearing>' . $imagestr . '</ul>';
  else
    return "";
}

function wisski_pathbuilder_imagecache_default_presets() {
  $presets = array();
  $presets['wisski_thumbnail'] = array (
    'presetname' => 'wisski_thumbnail',
    'actions' => array(
      0 => array(
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => array(
          'width' => '180',
        ),
      ),
    ),
  );
  
    $presets['wisski_original'] = array (
    'presetname' => 'wisski_original',
    'actions' => array(
    ),
  );
  
  return $presets;
}

function wisski_pathbuilder_getCoordinates($node) {

  $indiv = $node->title;

  $group = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv), TRUE);

  $allgroups = wisski_pathbuilder_getAllMembers($group, FALSE);

  $imagegroups = array();
  $coordarr = NULL;
  
  foreach($allgroups as $imagegroup) {
    $data = wisski_pathbuilder_getPathData($imagegroup);
    if($data['fieldtype'] == "coordinates") {
      $imagegroups[] = $imagegroup;
    }
  }
  
  $imagestr = "";
  if(!empty($imagegroups)) {
    $coordarr = array();
  }
  
  foreach($imagegroups as $imagegroup) {

    $condition = ("FILTER ( ?x0 = <" . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title). "> ) ");
    $sparql = wisski_pathbuilder_get_sparql($imagegroup, $condition);

    $rows =  wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($sparql, 'rows');

    foreach($rows as $pic) {
      $pic = $pic['out'];
      
      if(trim($pic) == "")
        continue;

    $coordarr[] = $pic;
    }
  }


  return $coordarr;
}

function wisski_pathbuilder_menu_alter(&$items) {

//  $items['node/%node/tview']['type'] = MENU_CALLBACK;

}


function wisski_pathbuilder_form_individual_node_form_alter(&$form, &$form_state) {

  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('inc', 'node', 'node.pages');
  
  if(!$form['nid']['#value']) {
    if(empty($form_state['values']['group']))
      $groupid = wisski_pathbuilder_group_load(arg(3));
    else
      $groupid = $form_state['values']['group'];

    $newform = wisski_pathbuilder_build_group($form_state, $groupid);
  
  } else {
    $node = node_load($form['nid']['#value']);
//    print_r("held!");
//    drupal_set_message("title is: " . serialize($node));
    $groupid = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title));
    $newform = wisski_pathbuilder_template_edit($form_state, $node);
  }
//  drupal_set_message("gid: " . $groupid);

  $form_state['values']['group'] = $groupid;
  
  $form['#node']->step = 2;
  
  $todelete = array("title", "instanceOf", "instanceOfSelect", "instanceOfAdd", "propfield");
  
  foreach ($todelete as $key) {
    unset($form[$key]);
  }

  foreach($newform as $key => $value) {
    $newform[$key]['#weight'] = -100;
    break;
  }
  
  $oldform = $form;
  
  $form = $newform + $oldform; 
    
  return;
  
}

function wisski_pathbuilder_form_alter(&$form, &$form_state, $form_id) {

  module_load_include('inc', 'node', 'node.pages');

  // add?
  if($form_id == "individual_node_form" && !$form['nid']['#value']) {
    $killhandlers = array("wisski_valuesToStorage", "wisski_saveInstanceOfState", "wisski_savePropertyState", "wisski_node_form_final_submit");
    
    foreach($form['buttons']['submit']['#submit'] as $key => $kill)
      if(in_array($kill, $killhandlers))
        unset($form['buttons']['submit']['#submit'][$key]);

    module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');

    $form['buttons']['submit']['#submit'] = array_merge(array('wisski_pathbuilder_alter_add_submit'),$form['buttons']['submit']['#submit']);
    if(!empty($form['#submit']))
      $form['#submit'] = array_merge(array('wisski_pathbuilder_rescue_values'), $form['#submit']);
    else
      $form['#submit'] = array('wisski_pathbuilder_rescue_values');
  // edit!
  } else if($form_id == "individual_node_form" && $form['nid']['#value']) {
    
    $killhandlers = array("wisski_valuesToStorage", "wisski_saveInstanceOfState", "wisski_savePropertyState", "wisski_node_form_final_submit");
    
    foreach($form['buttons']['submit']['#submit'] as $key => $kill)
      if(in_array($kill, $killhandlers))
        unset($form['buttons']['submit']['#submit'][$key]);

    module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');

    $form['buttons']['submit']['#submit'] = array_merge(array('wisski_pathbuilder_alter_edit_submit'),$form['buttons']['submit']['#submit']);
    $form['#submit'] = array_merge(array('wisski_pathbuilder_rescue_values'), $form['#submit']);
  }

}

function wisski_imageprocessing($form, &$form_state) {
  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('inc', 'node', 'node.pages');
  
  if($form_state['values']['files']) {
    foreach($form_state['values']['files'] as $file) {
      if(preg_match('/(\.png|\.jpg|\.jpeg|\.gif|\.tif|\.tiff)$/i', $file['filename'])) {

        $allgroups = wisski_pathbuilder_getAllMembers($form_state['values']['group'], FALSE);
        
        $imagegroups = array();
          
        foreach($allgroups as $imagegroup) {
          $data = wisski_pathbuilder_getPathData($imagegroup);
          if($data['fieldtype'] == "images") {
            $imagegroups[] = $imagegroup;
          }
        }
      
        if(count($imagegroups) <= 0) 
          break;
      
        $to_attach = $imagegroups[count($imagegroups)-1];
        $to_get_there = array();
        $current = $to_attach;
        $multigroups = array();
      
        while($current != 0) {
          $data = wisski_pathbuilder_getPathData($current);
          if($data['fieldtype'] == "ontogroup")
            $multigroups[$current] = TRUE;
          else
            $multigroups[$current] = FALSE;
          $to_get_there = array_merge(array($current), $to_get_there);
          $current = $data['group_id'];
        }
        
//        drupal_set_message(serialize($to_get_there));
//        return;
        
        $fs_pointer = &$form_state['values'];
      
        foreach($to_get_there as $go_to) {
//          drupal_set_message("fs pointer is now: " . serialize($fs_pointer));
          if($multigroups[$go_to])
            $fs_pointer = &$fs_pointer[$go_to][$go_to][$go_to . '_0'];
          else
            $fs_pointer = &$fs_pointer[$go_to][$go_to];
        }
//        drupal_set_message("fs pointer is now: " . serialize($fs_pointer));
      
        $already_there = false;
        if($fs_pointer)
          foreach($fs_pointer as $key => $value) 
            if($value == file_create_url($file['filepath']))
              $already_there = $key;
      
        if(!$already_there && !$file['remove'])
          $fs_pointer[$to_attach . '_' . count($fs_pointer)] = file_create_url($file['filepath']);
        if($already_there && $file['remove'])
          $fs_pointer[$already_there] = "";

      }
    }
  }
}

function wisski_pathbuilder_alter_add_submit($form, &$form_state) {

  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('module', 'upload', 'upload');  

  if (module_exists('upload')) upload_node_form_submit(&$form, $form_state);

  
  wisski_imageprocessing($form, $form_state);
  
  wisski_pathbuilder_rescue_values($form, $form_state);

  wisski_pathbuilder_build_group_submit($form, $form_state);

}

function wisski_pathbuilder_alter_edit_submit($form, &$form_state) {
  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('module', 'upload', 'upload');

  if (module_exists('upload')) upload_node_form_submit(&$form, $form_state);

  
  wisski_imageprocessing($form, $form_state);

  wisski_pathbuilder_rescue_values($form, $form_state);
  
  wisski_pathbuilder_template_edit_submit($form, $form_state);

}

function wisski_pathbuilder_rescue_values($form, &$form_state) {

  $form_state['wisskiValues'] = $form_state['values'];
  
//  drupal_set_message("rescued!");  
  if(empty($form_state['wisskiValues']['old_values'])) {
    $form_state['wisskiValues']['old_values'] = $form_state['values']['defaults'];
  }
  
  if(empty($form_state['wisskiValues']['paths'])) {
    $form_state['wisskiValues']['paths'] = $form_state['values']['paths'];
  }
  
}

