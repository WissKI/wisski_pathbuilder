<?php

/*
 * (c) WissKI Project wiss-ki.eu
 * This software is licensed under the same terms as Drupal
 * (GNU GPLv2  or later). See LICENSE.txt for a copy of the license.
 */

/**
 * @file
 * Allows administrators to customize the site templating menu.
 *
 */

function wisski_pathbuilder_init() {
}

/**
 * Implementation of hook_perm().
 */
function wisski_pathbuilder_perm() {
  return array('wisski access templateView', 'wisski access templateEdit', 'wisski access templateCreate');
}


function wisski_pathbuilder_group_load($menu) {
  if(is_numeric($menu))
    $result = db_query("SELECT * FROM {wisski_template} WHERE is_group = 1 AND enabled = 1 AND id = $menu");
  else
    $result = db_query("SELECT * FROM {wisski_template} WHERE is_group = 1 AND enabled = 1 AND name = '$menu'");
    
  $arr = db_fetch_array($result);
      
  if(!isset($arr['id']))
    return FALSE;
  return $arr['id'];
              
}


/**
 * Implementation of hook_menu().
 */
 
function wisski_pathbuilder_menu() {

  $items['wisski_pathbuilder/autocomplete/%'] = array(
    'title' => 'Autocomplete',
    'description' => "Desc",
    'page callback' => 'wisski_pathbuilder_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('wisski access templateCreate'),
    'file' => 'wisski_pathbuilder.inc',
    'type' => MENU_CALLBACK,
  );

  $items['wisski_pathbuilder/duplicate/%'] = array(
    'title' => 'Autocomplete',
    'description' => "Desc",
    'page callback' => 'wisski_pathbuilder_duplicate',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('wisski access templateCreate'),
    'file' => 'wisski_pathbuilder.inc',
    'type' => MENU_CALLBACK,
  );

  global $user;

  $node = new stdclass();
  $node->type = "individual";
  $node->language = "";

  $items['node/add/individual/%wisski_pathbuilder_group'] = array(
    'title' => t("Group"),
    'description' => t("Desc"),
    'page callback' => 'wisski_form_forward',
    'page arguments' => array($node),
    'access callback' => 'user_access',
    'access arguments' => array('wisski access templateCreate'),
    'type'     => MENU_NORMAL_ITEM,            
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );

  $items['node/%node/tview'] = array(
    'title'    => t('Template View'),
    'page callback' => 'wisski_pathbuilder_template_view',
    'page arguments' => array(array(), 1),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('wisski_pathbuilder_template_view',1),
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski access templateView'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );
  
  $items['node/%node/xview'] = array(
    'title'    => t('Text View'),
    'page callback' => 'wisski_pathbuilder_getText',
    'page arguments' => array(1),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('wisski_pathbuilder_template_view',1),
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski access templateView'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['node/%node/pathview'] = array(
    'title'    => t('Paths'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pathbuilder_path_view',1),
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski administrate page'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );
  
  $items['node/%node/tedit'] = array(
    'title'    => t('Edit'),
    'page callback' => 'wisski_form_forward',
    'page arguments' => array(1), 
    'access callback' => 'wisski_loader',
    'access arguments' => array(1, 'wisski access templateEdit'),
    'type'     => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/add_own_path/%'] = array(
    'title' => t('Add Path'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_wisski_pathbuilder_add_own_path', 5),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/get_own_path'] = array(
    'page callback' => 'wisski_pathbuilder_calculate_path',
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/%/edit'] = array(
    'title' => t('Edit menu item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pathbuilder_edit_item', 'edit', 4, NULL),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder/%/delete'] = array(
    'title' => t('Delete menu item'),
    'page callback' => 'wisski_pathbuilder_delete_item',
    'page arguments' => array(4),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
    'file' => 'wisski_pathbuilder.inc',
  );

  $items['admin/settings/wisski/pathbuilder'] = array(
    'title' => t('Pathbuilder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pathbuilder_overview_form', 'Pathbuilder'),
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wisski_pathbuilder.inc',
    'weight' => 2,
  );
  
  include_once(dirname(__FILE__) . '/wisski_pathbuilder.inc');
  
  foreach(wisski_pathbuilder_getPathbuilderTrees() as $key => $elemname) {  

    $items['admin/settings/wisski/pathbuilder/'.$key.'/'] = array(
      'title' => t($elemname),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_pathbuilder_overview_form', 'Pathbuilder', $key),
      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    if($key == 2)
      $items['admin/settings/wisski/pathbuilder/'.$key.'/']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
  
  return $items;
}

function wisski_form_forward($node) {

  module_load_include('inc', 'node', 'node.pages');

  if(empty($node->nid)) {
    global $user;
    node_object_prepare($node);
    $node->uid = $user->uid;
    $node->name = $user->name;
  }

  $return = drupal_get_form('individual_node_form', $node);
  return $return;

}

/**
 * Implemenation of hook_theme().
 */
function wisski_pathbuilder_theme() {
  return array(
    'wisski_pathbuilder_overview_form' => array(
      'file' => 'wisski_pathbuilder.inc',
      'arguments' => array('form' => NULL),
    ),
    'wisski_pathbuilder_dragtable' => array(
      'file' => 'wisski_pathbuilder.inc',
      'arguments' => array('element' => NULL),
    ),
    
    /*
    'individual_node_form' => array(
      'file' => 'wisski_pathbuilder.inc',
      'arguments' => array('form' => NULL),
    ),
    */
  );
}

function wisski_pathbuilder_elements() {
  $type['wisski_pathbuilder_dragtable'] = array('#prefix' => '', '#suffix' => '');
  return $type;
}

function theme_wisski_pathbuilder_dragtable($element) {
  //drupal_set_message("Hallo drag table");
//  drupal_set_message(htmlentities(serialize($element)));

  $table_rows = array();
  $remaining = array();
  
  //drupal_set_message(serialize($element['#children']));

/*  
  if(is_array($element)) {
    foreach($element as $key => $value) {
      $table_row = array();
      if(is_array($value) && isset($value['#type'])) {
        //drupal_set_message(serialize($value));
        if($value['#type'] == "weight") {
          continue; // weights are added with their fields below
        } else if($value['#type'] == "hidden") {
          // hidden goes into the remaining parts
          $remaining .= drupal_render($value);
        } else {
          // anything else - get it here!
          drupal_set_message(serialize($value));
          $table_row[] = drupal_render($value);
          $table_row[] = drupal_render($element['weight_' . $key]);
          $table_rows[] = array('data' => $table_row, 'class' => 'draggable');
        }
      }
    }
  }
  */

  //drupal_set_message(htmlentities($element['#children']));
  preg_match_all('/<div class=\"form-item\".*?id="(.*?)".*?>([^`]*?)<\/div>/', $element['#children'], $matches);
  $remaining = preg_replace('/<div class=\"form-item\".*?id="(.*?)".*?>([^`]*?)<\/div>/', '', $element['#children']);  
//  drupal_set_message("matches: " . serialize($matches));
  
  $data = array();
  $weightkey = array();
  
  foreach($matches[1] as $key => $value) {
    $data[$value] = $matches[0][$key];
    //drupal_set_message("strpos auf $value: " . serialize(strpos("-weight-", $value)));
    if(strpos($value, "-weight-") !== FALSE) {
      $weightkey[] = $value;
    }
  }
  
  //drupal_set_message("data: " . serialize($data));
  //drupal_set_message(serialize($weightkey));
  
  foreach($weightkey as $key) {
    $table_row = array();
    $datakey = str_replace("-weight-", "-", $key);
    $table_row[] = $data[$datakey];
    $table_row[] = $data[$key];
    $table_rows[] = array('data' => $table_row, 'class' => 'draggable');
  }
  
  /*
  if(is_array($element)) {
    $table_rows[] = array('data' => $element['#children'], 'class' => 'draggable');
  }
  */
  
  //drupal_set_message(serialize($table_rows));
  
  $header = array('Field', 'Weight');
  $id = $element['#attributes']['id'];
  
  $form = array('#value' => theme('table', $header, $table_rows, array('id' => $id)));
  
  $output = drupal_render($form);
  $output .= $remaining;

  drupal_add_tabledrag($id, 'order', 'sibling', 'wki-weight');

  return $output;
}

/**
 * Title callback for the menu overview page and links.
 */ 
function wisski_pathbuilder_overview_title($menu) {
  return t($menu);
}

/**
 * Implementation of hook_nodeapi().
 */
function wisski_pathbuilder_nodeapi(&$node, $op) {
  if($op == "view") {
	  if($node->content['body'] != "")
		  unset($node->content['ARC']);  
  }
}

function wisski_pathbuilder_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('WissKI templated view');
    $block[1]["info"] = t('WissKI text view');
    return $block;
                
  } else if ($op == "view") {
    if(is_numeric(arg(1)))
      $node = node_load(arg(1));
    if(!isset($node))
      return;
      
    if(!user_access('wisski access templateView'))
      return;
      
    if ($delta == 0) {
      
      $block['subject'] = t('Templated Content');
      include_once(dirname(__FILE__) . '/wisski_pathbuilder.inc');
      $block['content'] =  wisski_pathbuilder_template_view(array(), $node);    
      return $block;          
    } else if ($delta == 1) {
      $block['subject'] = t('Blocked Text');
      $block['content'] = wisski_pathbuilder_getText($node);
      return $block;
    }
  }
}

function wisski_pathbuilder_getText($node) {
  if(!user_access('wisski access templateView')) {
    return "";
  }

  $indiv = $node->title;

  $namespaces = wisski_store_getObj()->wisski_ARCAdapter_getNamespaces();
	  $q = "";
  	foreach ($namespaces as $name => $val) {
      $q .= "PREFIX $name:\t<$val>\n";
  	}  
  	
  // beware! Dirty!
  $pred = "ecrm:P129i_is_subject_of";
  
  $q .= "SELECT * WHERE { <" . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv) . "> <" 
    .  wisski_store_getObj()->wisski_ARCAdapter_delNamespace($pred) . "> ?x . }";
  $rows =  wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($q, 'rows');

  // by Martin: if no text  found, search via Document group path
  if (!$rows && module_exists('wisski_textproc')) {
    $text_uris = wisski_textproc_get_texts(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv));
    $rows = array(array('x' => $text_uris[0]));
  }
  // end by Martin
 
  $url = parse_url($rows[0]['x']);
  global $base_url;
  $base = $base_url . "/";
  $search = str_replace($base, "", $rows[0]['x']);
  $text = drupal_get_normal_path($search);
  
  $node2 = node_load(arg(1,$text));

  if (empty($node2->body)) return '';
  // TEI support
  if (module_exists('wisski_textproc') && function_exists('wisski_textproc_convert_tei_to_html')) {
    return wisski_textproc_convert_tei_to_html($node2->body); // transform tei to html
  } else {
    return check_markup($node2->body, variable_get('wisski_editor_input_format', FILTER_FORMAT_DEFAULT));
 //   return $node2->body;  // normal output
  }
  // end TEI support
  // old:
  // return $node2->body;
}

function wisski_pathbuilder_getCoordinates($node) {

  $indiv = $node->title;

  $group = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv), TRUE);

  $allgroups = wisski_pathbuilder_getAllMembers($group, FALSE);

  $imagegroups = array();
  $coordarr = NULL;
  
  foreach($allgroups as $imagegroup) {
    $data = wisski_pathbuilder_getPathData($imagegroup);
    if($data['fieldtype'] == "coordinates") {
      $imagegroups[] = $imagegroup;
    }
  }
  
  $imagestr = "";
  if(!empty($imagegroups)) {
    $coordarr = array();
  }
  
  foreach($imagegroups as $imagegroup) {

    $condition = ("FILTER ( ?x0 = <" . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title). "> ) ");
    $sparql = wisski_pathbuilder_get_sparql($imagegroup, $condition);

    $rows =  wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($sparql, 'rows');

    foreach($rows as $pic) {
      $pic = $pic['out'];
      
      if(trim($pic) == "")
        continue;

    $coordarr[] = $pic;
    }
  }


  return $coordarr;
}

function wisski_pathbuilder_menu_alter(&$items) {

//  $items['node/%node/tview']['type'] = MENU_CALLBACK;

}


function wisski_pathbuilder_form_individual_node_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('inc', 'node', 'node.pages');
  
  if(!$form['nid']['#value']) {
    if(empty($form_state['values']['group']))
      $groupid = wisski_pathbuilder_group_load(arg(3));
    else
      $groupid = $form_state['values']['group'];

    $newform = wisski_pathbuilder_build_group($form_state, $groupid);
  
  } else {
    $node = node_load($form['nid']['#value']);
//    print_r("held!");
//    drupal_set_message("title is: " . serialize($node));
    $groupid = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title));
    $newform = wisski_pathbuilder_template_edit($form_state, $node);
  }
//  drupal_set_message("gid: " . $groupid);

  $form_state['values']['group'] = $groupid;
  
  $form['#node']->step = 2;
  
  $todelete = array("title", "instanceOf", "instanceOfSelect", "instanceOfAdd", "propfield");
  
  foreach ($todelete as $key) {
    unset($form[$key]);
  }

  foreach($newform as $key => $value) {
    $newform[$key]['#weight'] = -100;
    break;
  }
  
  $oldform = $form;
  
  $form = $newform + $oldform;
    
  return;
  
}

/* ============================== PB Hooks ============================= */


/* This Function implements hook_pb_fieldtypes
 * With this you can add own custom fieldtypes, too
 * @author Mark Fichtner
 */
function wisski_pathbuilder_pb_fieldtypes() {
  return array("textfield" => "textfield", "textarea" => "textarea", 
        "checkboxes" => "checkboxes", "select" => "select", "radios" => "radios", 
        "ontotext" => "ontotext", "description" => "description", "coordinates" => "coordinates");
}

/* This Function implements hook_pb_fieldtypes
 * With this you can add own custom fieldtypes, too
 * @author Mark Fichtner
 */

function wisski_pathbuilder_pb_fieldinformation($fieldtype) {
  /* an array is returned with:
   * edit_type    - can be single or multiple depending of an array of values is returned on saving the form or a single value
   * delete_empty - true or false, check if the empty values (0, "", null) should be considered as nothing or should be stored into the TS
   * add_button   - true or false, check if a multiply-button should be displayed - yes here and edit_type single does not make sense!
   * display_type - the fapi form field which should be used to display this field
   */
  
  if($fieldtype == "checkboxes") {
    return array("edit_type"    => "multiple",
                 "delete_empty" => true,
                 "add_button"   => false,
                 "display_type" => "checkboxes");
  }
  
  if($fieldtype == "select") {
    return array("edit_type"    => "multiple",
                 "delete_empty" => true,
                 "add_button"   => false,
                 "display_type" => "select");
  }
  
  if($fieldtype == "radios") {
    return array("edit_type"    => "multiple",
                 "delete_empty" => false,
                 "add_button"   => false,
                 "display_type" => "radios");
  }  
  
  if($fieldtype == "coordinates") {
    return array("edit_type"    => "multiple",
                 "delete_empty" => false,
                 "add_button"   => true,
                 "display_type" => "textfield");
  }
  
  if($fieldtype == "ontotext") {
    return array("edit_type"    => "multiple",
                 "delete_empty" => false,
                 "add_button"   => true,
                 "display_type" => "textfield");
  }
  
  if($fieldtype == "textfield" || $fieldtype == "textarea") {
  
    return array("edit_type"    => "single",
                 "delete_empty" => false,
                 "add_button"   => false,
                 "display_type" => $fieldtype);  
  }
}

/* This Function implements hook_pb_fieldtypes
 * With this you can add own custom fieldtypes, too
 * @author Mark Fichtner
 */

function wisski_pathbuilder_pb_changesettings($fieldtype, $id, $preset) {
  $my_preset = $preset;
  $row_information = module_invoke_all("pb_fieldinformation", $fieldtype);

  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');    

  $my_preset['#type'] = $row_information['display_type'];
 
  if($row_information['edit_type'] == 'multiple') {
    if(!$row_information['add_button']) {
      $my_preset['#options'] = wisski_pathbuilder_getOptionArray($id);

    } else {
      //$my_preset['#type'] = "textfield";    
      $my_preset['#autocomplete_path'] = ('wisski_pathbuilder/autocomplete/' . $id);
      $my_preset['#maxlength'] = 2000;
    }
  } else {
    $my_preset['#autocomplete_path'] = ('wisski_pathbuilder/autocomplete/' . $id);
    $my_preset['#maxlength'] = 2000;
  }

  return $my_preset;
}


function wisski_pathbuilder_rescue_values($form, &$form_state) {
  
  $form_state['wisskiValues'] = $form_state['values'];
  
//  drupal_set_message("rescued!");  
  if(empty($form_state['wisskiValues']['old_values'])) {
    $form_state['wisskiValues']['old_values'] = $form_state['values']['defaults'];
  }
  
  if(empty($form_state['wisskiValues']['paths'])) {
    $form_state['wisskiValues']['paths'] = $form_state['values']['paths'];
  }
  
}
